// <auto-generated />
using System;
using System.Collections.Generic;
using Dallal_Backend_v2;
using Dallal_Backend_v2.Entities;
using Dallal_Backend_v2.Entities.Submissions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dallal_Backend_v2
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250612123011_LocationColumnToListingTable")]
    partial class LocationColumnToListingTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dallal_Backend_v2.Entities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<LocalizedString>("Name")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Dallal_Backend_v2.Entities.DetailsDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<LocalizedString>("Name")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DetailsDefinitions");
                });

            modelBuilder.Entity("Dallal_Backend_v2.Entities.DetailsDefinitionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DetailsDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<LocalizedString>("Name")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("DetailsDefinitionId");

                    b.ToTable("DetailsDefinitionOptions");
                });

            modelBuilder.Entity("Dallal_Backend_v2.Entities.Listing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("AreaInMetersSq")
                        .HasColumnType("numeric");

                    b.Property<int>("BathroomCount")
                        .HasColumnType("integer");

                    b.Property<int>("BedroomCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BrokerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ListingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry (point)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PricePerContract")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PricePerYear")
                        .HasColumnType("numeric");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RentalContractPeriod")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("BrokerId");

                    b.HasIndex("CreatedAt")
                        .IsDescending();

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("Dallal_Backend_v2.Entities.ListingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DefinitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionId");

                    b.HasIndex("ListingId");

                    b.HasIndex("OptionId");

                    b.ToTable("ListingDetails");
                });

            modelBuilder.Entity("Dallal_Backend_v2.Entities.Submissions.Submission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<SubmissionChange>>("Changes")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RejectedReason")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Dallal_Backend_v2.Entities.Users.BaseUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LockoutUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("BaseUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Dallal_Backend_v2.Entities.Users.Admin", b =>
                {
                    b.HasBaseType("Dallal_Backend_v2.Entities.Users.BaseUser");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Dallal_Backend_v2.Entities.Users.Broker", b =>
                {
                    b.HasBaseType("Dallal_Backend_v2.Entities.Users.BaseUser");

                    b.Property<string>("AgencyAddress")
                        .HasColumnType("text");

                    b.Property<string>("AgencyEmail")
                        .HasColumnType("text");

                    b.Property<string>("AgencyLogo")
                        .HasColumnType("text");

                    b.Property<string>("AgencyName")
                        .HasColumnType("text");

                    b.Property<string>("AgencyPhone")
                        .HasColumnType("text");

                    b.Property<string>("AgencyWebsite")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Broker");
                });

            modelBuilder.Entity("Dallal_Backend_v2.Entities.Users.Buyer", b =>
                {
                    b.HasBaseType("Dallal_Backend_v2.Entities.Users.BaseUser");

                    b.HasDiscriminator().HasValue("Buyer");
                });

            modelBuilder.Entity("Dallal_Backend_v2.Entities.Area", b =>
                {
                    b.HasOne("Dallal_Backend_v2.Entities.Area", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Dallal_Backend_v2.Entities.DetailsDefinitionOption", b =>
                {
                    b.HasOne("Dallal_Backend_v2.Entities.DetailsDefinition", null)
                        .WithMany("Options")
                        .HasForeignKey("DetailsDefinitionId");
                });

            modelBuilder.Entity("Dallal_Backend_v2.Entities.Listing", b =>
                {
                    b.HasOne("Dallal_Backend_v2.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dallal_Backend_v2.Entities.Users.Broker", "Broker")
                        .WithMany()
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Broker");
                });

            modelBuilder.Entity("Dallal_Backend_v2.Entities.ListingDetail", b =>
                {
                    b.HasOne("Dallal_Backend_v2.Entities.DetailsDefinition", "Definition")
                        .WithMany()
                        .HasForeignKey("DefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dallal_Backend_v2.Entities.Listing", null)
                        .WithMany("Details")
                        .HasForeignKey("ListingId");

                    b.HasOne("Dallal_Backend_v2.Entities.DetailsDefinitionOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Definition");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Dallal_Backend_v2.Entities.Area", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Dallal_Backend_v2.Entities.DetailsDefinition", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Dallal_Backend_v2.Entities.Listing", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
